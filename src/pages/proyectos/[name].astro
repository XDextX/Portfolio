---
// src/pages/proyectos/[name].astro
import Chip from '@components/Chip.astro';
import Pill from '@components/Pill.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import Breadcrumbs from '@components/BreadCrumbs.astro';
import { t } from '@i18n/index';
import Readme from '@components/Readme.astro';
import type { GitHubRepo } from '@type/github';
import { applyLocale } from '@utils/locale';

const { name } = Astro.params;
const locale = applyLocale(Astro);

const repository = await fetch(`${Astro.url.origin}/api/v1/projects/${name}.json`);
if (!repository.ok) {
	return Astro.redirect('/404');
}

const repo = (await repository.json()) as GitHubRepo;

const intlLocale = locale === 'es' ? 'es-CR' : 'en-US';
const title = `${repo.name} - ${t('projects.title')}`;
const desc = repo.description ?? t('project.meta.noDescription');
const lang = repo.language ?? 'N/A';
const hasDemo = !!repo.homepage && String(repo.homepage).trim() !== '';
const topics: string[] = Array.isArray(repo.topics) ? repo.topics : [];
const updated = new Date(repo.updated_at);
const fmtDate = new Intl.DateTimeFormat(intlLocale, { dateStyle: 'medium' });
const fmtNum = new Intl.NumberFormat(intlLocale);
const starsLabel = t('project.meta.starsLabel', { count: fmtNum.format(repo.stargazers_count) });
const forksLabel = t('project.meta.forksLabel', { count: fmtNum.format(repo.forks_count) });

const directions = {
	[t('nav.home')]: '/',
	[t('nav.projects')]: '/proyectos',
	[repo.name]: `/proyectos/${repo.name}`,
};

const jsonLd = {
	'@context': 'https://schema.org',
	'@type': 'SoftwareApplication',
	name: repo.name,
	url: `${Astro.url.origin}/proyectos/${repo.name}`,
	applicationCategory: 'DeveloperApplication',
	operatingSystem: 'Any',
	description: desc,
};
---

<BaseLayout title={title} description={desc} jsonLd={jsonLd} locale={locale}>
	<section class='wrap'>
		<Breadcrumbs directions={directions} />

		<header>
			<div class='hero__top'>
				<h1 id='project-title' class='title'>{repo.name}</h1>
				<Pill text={lang} variant='success' outlined size='md' />
			</div>

			{desc && (
				<div class='desc' id='project-desc'>
					<h3 class='mb-4'>{t('project.meta.description')}</h3>
					<p class='m'>{desc}</p>
				</div>
			)}

			<section class='grid' aria-describedby='project-desc'>
				<aside class='card sidebar' aria-label={t('project.actions.section')}>
					<div class='updated flex items-center gap-2'>
						<span class='dot' aria-hidden='true'></span>
						<span>
							<time datetime={updated.toISOString()}>
								{t('project.meta.updated', { date: fmtDate.format(updated) })}
							</time>
						</span>
					</div>

					<div class='flex gap-4 items-center mt-2' aria-label='Estad√≠sticas'>
						<span title='Stars' aria-label='Stars'
							>‚≠ê {fmtNum.format(repo.stargazers_count)}</span
						>
						<span title='Forks' aria-label='Forks'
							>üç¥ {fmtNum.format(repo.forks_count)}</span
						>
					</div>

					{
						topics.length ? (
							<div class='topics' aria-label='Etiquetas'>
								{topics.map((tag) => (
									<Chip text={tag} />
								))}
							</div>
						) : null
					}

					<nav class='actions' aria-label='Acciones'>
						<a
							class='btn btn--ghost'
							href={repo.html_url}
							target='_blank'
							rel='noopener'
						>
							{t('project.actions.code')}
						</a>
						{
							hasDemo ? (
								<a
									class='btn btn--primary'
									href={repo.homepage}
									target='_blank'
									rel='noopener'
								>
									{t('project.actions.liveDemo')}
								</a>
							) : (
								<span class='btn btn--disabled' aria-disabled='true'>
									{t('project.actions.noDemo')}
								</span>
							)
						}
					</nav>
				</aside>

				<!-- CONTENIDO PRINCIPAL -->
				<section class='readme' aria-label='Documentaci√≥n'>
					<Readme repo={repo} />
				</section>
			</section>
		</header>
	</section>

	<style>
		/* Layout principal */
		.hero {
		}
		.hero__top {
			display: flex;
			align-items: center;
			gap: 0.75rem;
			margin: 1rem 0;
		}

		.grid {
			display: grid;
			grid-template-columns: 320px 1fr;
			gap: 1rem;
			align-items: start;
			min-height: 60vh;
		}

		/* La tarjeta lateral queda sticky */
		.sidebar {
			position: sticky;
			top: 1rem;
		}

		/* Solo el README scrollable */
		.readme {
			overflow: auto;
			max-height: calc(70vh - 2rem);
			padding-right: 0.25rem;
		}

		/* Miscel√°nea / A11y */
		.dot {
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: hsl(220 30% 60%);
			display: inline-block;
		}
		.updated {
			white-space: nowrap;
		}
		.topics {
			display: flex;
			gap: 0.5rem;
			flex-wrap: wrap;
			margin-top: 0.9rem;
		}
		.actions {
			display: flex;
			gap: 0.6rem;
			margin-top: 1rem;
			flex-wrap: wrap;
		}

		/* Responsive */
		@media (max-width: 900px) {
			.grid {
				grid-template-columns: 1fr;
			}
			.sidebar {
				position: static;
			}
			.readme {
				max-height: none;
			}
		}
	</style>
</BaseLayout>
