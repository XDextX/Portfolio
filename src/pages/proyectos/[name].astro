---
// src/pages/proyectos/[name].astro
import Chip from '@components/Chip.astro';
import Pill from '@components/Pill.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import Breadcrumbs from '@components/BreadCrumbs.astro';
import { t } from '@i18n/index';
import Readme from '@components/Readme.astro';
import type { GitHubRepo } from '@type/github';

const { name } = Astro.params;

const repository = await fetch(
	`${Astro.url.origin}/api/v1/projects/${name}.json`
);
if (!repository.ok) {
	return Astro.redirect('/404');
}

const repo = (await repository.json()) as GitHubRepo;

const title = `${repo.name} ‚Äì Project`;
const desc = repo.description!;
const lang = repo.language ?? 'N/A';
const hasDemo = !!repo.homepage && String(repo.homepage).trim() !== '';
const topics: string[] = Array.isArray(repo.topics) ? repo.topics : [];
const updated = new Date(repo.updated_at);
const locale = 'es-CR'; // o el que uses desde tu sistema i18n
const fmtDate = new Intl.DateTimeFormat(locale, { dateStyle: 'medium' });
const fmtNum = new Intl.NumberFormat(locale);

const directions = {
	home: '/',
	projects: '/proyectos',
	[`${repo.name}`]: `/proyectos/${repo.name}`,
};

const jsonLd = {
	'@context': 'https://schema.org',
	'@type': 'SoftwareApplication',
	name: repo.name,
	url: `${Astro.url}${[`${repo.name}`]}`,
	applicationCategory: 'DeveloperApplication',
	operatingSystem: 'Any',
	description: desc,
};

// util fecha legible
const fmtUpdated = updated.toLocaleDateString();
---

<BaseLayout title={title} description={desc} jsonLd={jsonLd}>
	<section class='wrap' style='max-height:80vh;'>
		<Breadcrumbs directions={directions} />

		<!-- HERO -->
		<header class='' aria-labelledby='project-title'>
			<div class='mb-4 mt-4'>
				<h1 id='accent-color ' class='title'>
					{repo.name}
				</h1>
				<Pill text={lang} variant='success' outlined size='md' />
			</div>
			{
				desc && (
					<div>
						<h3 class='mb-4'>{t('project.meta.description')}</h3>
						<p class='m'>{desc}</p>
					</div>
				)
			}
			<div class='flex gap-4' style='max-height: 60vh;'>
				<div class='card' style='flex-basis: 20%;' aria-label='M√©tricas'>
					<div class='flex items-center gap-2' class='updated'>
						<span class='dot' aria-hidden='true'> </span>
						<span>
							{t('project.meta.updated', { date: fmtUpdated })}
						</span>
					</div>
					<div class='flex gap-2 items-center'>
						<span class='flex items-center' title='Stars' aria-label='Stars'>
							‚≠ê {repo.stargazers_count}
						</span>
						<span class='flex items-center' title='Forks' aria-label='Forks'>
							üç¥ {repo.forks_count}
						</span>
					</div>
					{
						topics.length ? (
							<div class='topics' aria-label='Etiquetas'>
								{topics.map((tag) => (
									<Chip text={tag} />
								))}
							</div>
						) : null
					}
					<div class='actions'>
						<a
							class='btn btn--ghost'
							href={repo.html_url}
							target='_blank'
							rel='noopener'
						>
							{t('project.actions.code')}
						</a>

						{
							hasDemo ? (
								<a
									class='btn btn--primary'
									href={repo.homepage}
									target='_blank'
									rel='noopener'
								>
									{t('project.actions.liveDemo')}
								</a>
							) : (
								<span class='btn btn--disabled' aria-disabled='true'>
									{t('project.actions.noDemo')}
								</span>
							)
						}
					</div>
				</div>

				<div style='overflow-y: scroll;'>
					<Readme repo={repo} />
				</div>
			</div>
		</header>
	</section>

	<style>
		/* Hero */
		.hero {
		}
		.hero__top {
		}
		.title {
		}
		.desc {
		}

		.hero__meta {
		}
		.metric {
		}
		.dot {
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: hsl(220 30% 60%);
			display: inline-block;
		}
		.updated {
			white-space: nowrap;
		}

		.topics {
			display: flex;
			gap: 0.5rem;
			flex-wrap: wrap;
			margin-top: 0.9rem;
		}

		/* Acciones */
		.actions {
			display: flex;
			gap: 0.6rem;
			margin-top: 1rem;
			flex-wrap: wrap;
		}
	</style>
</BaseLayout>
