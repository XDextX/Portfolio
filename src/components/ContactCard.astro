---
import type { ContactItem } from '../types/contact';
import { t } from '@i18n/index';

export interface Props {
	item: ContactItem;
}
const { item } = Astro.props;

const rel =
	item.kind === 'email' || item.kind === 'phone'
		? undefined
		: 'noopener noreferrer me';

const isExternal = item.kind !== 'email' && item.kind !== 'phone';
const target = isExternal ? '_blank' : undefined;
const aria = `${item.label}: ${item.value}`;

const copyLabel = t('contact.actions.copy');
const copyAria = t('contact.actions.copyAria', { label: item.label });
const openLabel = t('contact.actions.open');
const copiedLabel = t('contact.actions.copied');
const errorLabel = t('contact.actions.error');
const restoreLabel = t('contact.actions.restore');
---

<article class='card primary-bg' aria-label={aria} itemprop={item.sameAs ? 'sameAs' : undefined}>
	<header class='flex gap-2 items-center'>
		{item.icon && (
			<img class='icon' src={item.icon} alt='' width='22' height='22' loading='lazy' />
		)}
		<h4 class='accent-color'>{item.label}</h4>
	</header>

	<p>
		<a href={item.href} rel={rel} target={target}>{item.value}</a>
	</p>

	<div class='actions'>
		<button
			class='btn primary'
			data-copy={item.value}
			data-copied={copiedLabel}
			data-error={errorLabel}
			data-restore={restoreLabel}
			aria-label={copyAria}
		>
			{copyLabel}
		</button>

		<a class='btn accent-color' href={item.href} rel={rel} target={target}>
			{openLabel}
		</a>
	</div>
</article>

<script is:inline>
	const container = document.currentScript?.parentElement;
	container
		?.querySelectorAll('button[data-copy]')
		.forEach((btn) => {
			btn.addEventListener('click', async () => {
				const val = btn.getAttribute('data-copy') || '';
				const original = btn.textContent || btn.dataset.restore || '';
				const copied = btn.dataset.copied || original;
				const error = btn.dataset.error || original;
				const restore = btn.dataset.restore || original;
				try {
					await navigator.clipboard.writeText(val);
					btn.textContent = copied;
					setTimeout(() => (btn.textContent = restore), 1200);
				} catch {
					btn.textContent = error;
					setTimeout(() => (btn.textContent = restore), 1200);
				}
			});
		});
</script>

<style>
	.icon {
		filter: brightness(1.1);
		opacity: 0.95;
	}
</style>
